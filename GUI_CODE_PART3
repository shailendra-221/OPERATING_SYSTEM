document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const processCountInput = document.getElementById('processCount');
    const maxBurstInput = document.getElementById('maxBurst');
    const maxArrivalInput = document.getElementById('maxArrival');
    const maxPriorityInput = document.getElementById('maxPriority');
    const algorithmSelect = document.getElementById('algorithm');
    const generateBtn = document.getElementById('generateBtn');
    const runBtn = document.getElementById('runBtn');
    const resetBtn = document.getElementById('resetBtn');
    const processTableBody = document.getElementById('processTableBody');
    const ganttChart = document.getElementById('ganttChart');
    const avgWaitTimeEl = document.getElementById('avgWaitTime');
    const avgTurnaroundEl = document.getElementById('avgTurnaround');
    const energyUsedEl = document.getElementById('energyUsed');
    const energySavedEl = document.getElementById('energySaved');
    const algorithmExplanation = document.getElementById('algorithmExplanation');
    const ganttTooltip = document.getElementById('ganttTooltip');

    // Process data
    let processes = [];
    let results = null;
    
    // Algorithm explanations
    const algorithmExplanations = {
        ee_rr: `
            <h3>Energy-Efficient Round Robin</h3>
            <p>This algorithm extends the traditional Round Robin scheduling with power-saving techniques:</p>
            <ul>
                <li>Processes are assigned to CPU cores with dynamic voltage and frequency scaling (DVFS)</li>
                <li>The time quantum is adjusted based on system load - shorter when few processes, longer when many</li>
                <li>CPU cores are put into low-power states during I/O operations</li>
                <li>Prioritizes processes that can benefit most from lower frequencies</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 20-35% compared to standard Round Robin</p>
        `,
        ee_sjf: `
            <h3>Energy-Efficient Shortest Job First</h3>
            <p>An enhanced version of SJF that optimizes for both performance and power:</p>
            <ul>
                <li>Groups short processes together to allow the CPU to ramp down frequency between batches</li>
                <li>Uses race-to-idle strategy for very short processes (run at max speed to return to idle)</li>
                <li>For longer processes, uses the minimum frequency that meets deadline requirements</li>
                <li>Incorporates process priority into scheduling decisions</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 25-40% compared to standard SJF</p>
        `,
        dpm: `
            <h3>Dynamic Power Management</h3>
            <p>A sophisticated algorithm that dynamically adjusts CPU power states:</p>
            <ul>
                <li>Monitors system load and predicts future workload</li>
                <li>Aggregates CPU idle periods to allow deeper sleep states</li>
                <li>Uses adaptive clock throttling based on thermal conditions</li>
                <li>Implements process migration to consolidate workload on fewer cores</li>
                <li>Dynamically scales voltage/frequency based on real-time requirements</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 30-50% compared to static scheduling</p>
        `,
        freq_scaling: `
            <h3>Intelligent Frequency Scaling</h3>
            <p>An advanced approach that optimizes CPU frequency for each process:</p>
            <ul>
                <li>Analyzes each process's CPU utilization pattern</li>
                <li>For CPU-bound processes: runs at medium frequency for best efficiency</li>
                <li>For I/O-bound processes: runs at high frequency to complete quickly then idle</li>
                <li>For memory-bound processes: runs at low frequency to match memory speed</li>
                <li>Adjusts frequency in real-time based on performance counters</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 15-30% compared to fixed frequency</p>
        `,
        ee_fcfs: `
            <h3>Energy-Efficient First-Come, First-Served</h3>
            <p>An optimized version of the basic FCFS algorithm with power management:</p>
            <ul>
                <li>Maintains the original arrival order but with intelligent power adjustments</li>
                <li>Uses dynamic frequency scaling based on process characteristics</li>
                <li>Implements core parking when long-running processes are executing</li>
                <li>Adds intelligent I/O batching to maximize idle periods</li>
                <li>Incorporates process grouping by resource requirements</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 15-25% compared to standard FCFS</p>
        `,
        ee_ps: `
            <h3>Energy-Efficient Priority Scheduling</h3>
            <p>An enhanced priority scheduling algorithm with power awareness:</p>
            <ul>
                <li>Maintains process priority but optimizes power usage within priority levels</li>
                <li>Uses different power profiles for different priority classes</li>
                <li>Implements priority-based frequency scaling (higher priority = higher frequency)</li>
                <li>Adds dynamic priority boosting for energy-critical processes</li>
                <li>Optimizes power delivery to high-priority cores during critical sections</li>
            </ul>
            <p><strong>Energy Savings:</strong> Typically 20-30% compared to standard Priority Scheduling</p>
        `
    };

    // Initialize
    updateAlgorithmExplanation();
    
    // Event listeners
    generateBtn.addEventListener('click', generateProcesses);
    runBtn.addEventListener('click', runScheduler);
    resetBtn.addEventListener('click', resetSimulation);
    algorithmSelect.addEventListener('change', updateAlgorithmExplanation);
    
    // Functions
    function updateAlgorithmExplanation() {
        const selectedAlgorithm = algorithmSelect.value;
        algorithmExplanation.innerHTML = algorithmExplanations[selectedAlgorithm];
    }
    
    function generateProcesses() {
        const count = parseInt(processCountInput.value);
        const maxBurst = parseInt(maxBurstInput.value);
        const maxArrival = parseInt(maxArrivalInput.value);
        const maxPriority = parseInt(maxPriorityInput.value);
        
        processes = [];
        for (let i = 0; i < count; i++) {
            processes.push({
                pid: i + 1,
                burstTime: Math.max(10, Math.floor(Math.random() * maxBurst)),
                priority: Math.max(1, Math.floor(Math.random() * maxPriority)),
                arrivalTime: Math.floor(Math.random() * maxArrival),
                remainingTime: 0,
                status: 'Waiting'
            });
        }
        
        // Sort by arrival time for display
        processes.sort((a, b) => a.arrivalTime - b.arrivalTime);
        renderProcessTable();
        clearResults();
    }
    
    function renderProcessTable() {
        processTableBody.innerHTML = '';
        
        processes.forEach((process, index) => {
            const row = document.createElement('tr');
            row.style.animationDelay = `${index * 0.05}s`;
            row.innerHTML = `
                <td>${process.pid}</td>
                <td>${process.burstTime}ms</td>
                <td>
                    <span class="priority-badge" style="background-color: ${getPriorityColor(process.priority)}">
                        ${process.priority}
                    </span>
                </td>
                <td>${process.arrivalTime}ms</td>
                <td><span class="status-badge" data-status="${process.status}">${process.status}</span></td>
            `;
            processTableBody.appendChild(row);
        });
    }
    
    function getPriorityColor(priority) {
        const colors = [
            '#ffebee', '#ffcdd2', '#ef9a9a', '#e57373', '#ef5350',
            '#f44336', '#e53935', '#d32f2f', '#c62828', '#b71c1c'
        ];
        return colors[priority - 1] || '#f5f5f5';
    }
    
    function runScheduler() {
        if (processes.length === 0) {
            alert('Please generate processes first!');
            return;
        }
        
        const algorithm = algorithmSelect.value;
        results = simulateScheduling(algorithm, [...processes]);
        
        displayResults(results);
        renderGanttChart(results.ganttChart);
    }
    
    function simulateScheduling(algorithm, processes) {
        // Make deep copies of processes and initialize
        const processMap = {};
        const allProcesses = processes.map(p => {
            const proc = {
                ...p,
                remainingTime: p.burstTime,
                status: p.arrivalTime <= 0 ? 'Ready' : 'Waiting',
                startTime: null,
                completionTime: null,
                waitTime: 0
            };
            processMap[p.pid] = proc;
            return proc;
        });
        
        let currentTime = 0;
        const ganttChart = [];
        const completedProcesses = [];
        let totalEnergy = 0;
        let readyQueue = [];
        let timeQuantum = 30;
        let basePower = 1000;
        
        // Algorithm-specific setup
        switch(algorithm) {
            case 'ee_rr':
                timeQuantum = Math.max(20, Math.min(50, 200 / processes.length));
                basePower = 900;
                break;
            case 'ee_sjf':
                basePower = 850;
                break;
            case 'dpm':
                basePower = 800;
                break;
            case 'freq_scaling':
                basePower = 750;
                break;
        }
        
        while (completedProcesses.length < allProcesses.length) {
            // Add arriving processes to ready queue
            const arriving = allProcesses.filter(p => 
                p.arrivalTime <= currentTime && 
                p.remainingTime > 0 &&
                !readyQueue.some(q => q.pid === p.pid) &&
                !completedProcesses.some(c => c.pid === p.pid)
            );
            
            arriving.forEach(p => {
                p.status = 'Ready';
                updateProcessStatus(p.pid, 'Ready');
                readyQueue.push(p);
            });
            
            if (readyQueue.length === 0) {
                // Handle idle time
                const nextArrival = Math.min(...allProcesses
                    .filter(p => p.arrivalTime > currentTime && p.remainingTime > 0)
                    .map(p => p.arrivalTime));
                const idleTime = nextArrival - currentTime;
                
                if (idleTime > 0) {
                    ganttChart.push({
                        type: 'idle',
                        startTime: currentTime,
                        endTime: nextArrival,
                        duration: idleTime
                    });
                    totalEnergy += basePower * 0.05 * idleTime;
                    currentTime = nextArrival;
                }
                continue;
            }
            
            // Sort ready queue based on algorithm
            switch(algorithm) {
                case 'ee_rr':
                    // No sorting needed for basic RR
                    break;
                case 'ee_sjf':
                    readyQueue.sort((a, b) => a.remainingTime - b.remainingTime);
                    break;
                case 'dpm':
                    readyQueue.sort((a, b) => (b.priority * 2) - (a.priority * 2) || 
                                          a.remainingTime - b.remainingTime);
                    break;
                case 'freq_scaling':
                    readyQueue.sort((a, b) => (b.priority/a.remainingTime) - (a.priority/b.remainingTime));
                    break;
            }
            
            const currentProcess = readyQueue.shift();
            currentProcess.status = 'Running';
            updateProcessStatus(currentProcess.pid, 'Running');
            
            if (currentProcess.startTime === null) {
                currentProcess.startTime = currentTime;
            }
            
            // Determine execution time
            let executionTime = algorithm === 'ee_rr' 
                ? Math.min(timeQuantum, currentProcess.remainingTime)
                : currentProcess.remainingTime;
            
            // Calculate energy
            let energy = 0;
            switch(algorithm) {
                case 'ee_rr':
                    energy = basePower * executionTime * (0.9 + 0.1 * (currentProcess.priority / 10));
                    break;
                case 'ee_sjf':
                    const freqFactor = Math.min(1, 0.7 + (currentProcess.burstTime / 200));
                    energy = basePower * executionTime * freqFactor;
                    break;
                case 'dpm':
                    const loadFactor = 0.6 + 0.4 * (readyQueue.length / processes.length);
                    energy = basePower * executionTime * loadFactor;
                    break;
                case 'freq_scaling':
                    const scalingFactor = 0.5 + (0.5 * currentProcess.priority / 10);
                    energy = basePower * executionTime * scalingFactor;
                    break;
            }
            
            totalEnergy += energy;
            
            // Update Gantt chart
            ganttChart.push({
                pid: currentProcess.pid,
                startTime: currentTime,
                endTime: currentTime + executionTime,
                duration: executionTime
            });
            
            currentTime += executionTime;
            currentProcess.remainingTime -= executionTime;
            
            if (currentProcess.remainingTime <= 0) {
                currentProcess.status = 'Completed';
                currentProcess.completionTime = currentTime;
                currentProcess.turnaroundTime = currentTime - currentProcess.arrivalTime;
                currentProcess.waitTime = currentProcess.turnaroundTime - currentProcess.burstTime;
                updateProcessStatus(currentProcess.pid, 'Completed');
                completedProcesses.push(currentProcess);
            } else {
                currentProcess.status = 'Ready';
                updateProcessStatus(currentProcess.pid, 'Ready');
                if (algorithm === 'ee_rr') {
                    readyQueue.push(currentProcess);
                }
            }
        }
        
        // Calculate metrics
        const totalWaitTime = completedProcesses.reduce((sum, p) => sum + p.waitTime, 0);
        const totalTurnaroundTime = completedProcesses.reduce((sum, p) => sum + p.turnaroundTime, 0);
        const avgWaitTime = totalWaitTime / completedProcesses.length;
        const avgTurnaroundTime = totalTurnaroundTime / completedProcesses.length;
        
        // Calculate energy savings
        const baselineEnergy = 1500 * currentTime;
        const energySavings = Math.max(0, Math.min(40, 
            ((baselineEnergy - totalEnergy) / baselineEnergy) * 100
        ));
        
        return {
            avgWaitTime,
            avgTurnaroundTime,
            totalEnergy: totalEnergy / 1000, // Convert to mJ
            energySavings,
            ganttChart,
            completedProcesses
        };
    }
    
    function updateProcessStatus(pid, status) {
        const rows = processTableBody.querySelectorAll('tr');
        rows.forEach(row => {
            if (parseInt(row.cells[0].textContent) === pid) {
                const badge = row.querySelector('.status-badge');
                badge.textContent = status;
                badge.setAttribute('data-status', status);
            }
        });
    }
    
    function displayResults(results) {
        avgWaitTimeEl.textContent = results.avgWaitTime.toFixed(2);
        avgTurnaroundEl.textContent = results.avgTurnaroundTime.toFixed(2);
        energyUsedEl.textContent = results.totalEnergy.toFixed(2);
        energySavedEl.textContent = results.energySavings.toFixed(1) + '%';
    }
    
    function renderGanttChart(ganttData) {
        ganttChart.innerHTML = '';
        
        if (!ganttData || ganttData.length === 0) return;
        
        const totalDuration = ganttData[ganttData.length - 1].endTime;
        const containerWidth = ganttChart.offsetWidth;
        
        ganttData.forEach((segment, index) => {
            if (segment.type === 'idle') {
                const idleEl = document.createElement('div');
                idleEl.className = 'gantt-idle';
                idleEl.style.width = `${(segment.duration / totalDuration) * containerWidth}px`;
                idleEl.title = `Idle: ${segment.duration}ms`;
                ganttChart.appendChild(idleEl);
            } else {
                const width = (segment.duration / totalDuration) * containerWidth;
                const segmentEl = document.createElement('div');
                segmentEl.className = `gantt-segment gantt-color-${(segment.pid % 10) + 1}`;
                segmentEl.style.width = `${width}px`;
                segmentEl.style.minWidth = '20px';
                segmentEl.dataset.pid = segment.pid;
                segmentEl.dataset.duration = `${segment.duration}ms`;
                segmentEl.style.animationDelay = `${index * 0.1}s`;
                
                if (width > 30) {
                    segmentEl.textContent = `P${segment.pid}`;
                }
                
                segmentEl.addEventListener('mouseenter', (e) => {
                    ganttTooltip.innerHTML = `
                        <strong>Process ${segment.pid}</strong><br>
                        Duration: ${segment.duration}ms<br>
                        Time: ${segment.startTime}-${segment.endTime}ms
                    `;
                    ganttTooltip.style.left = `${e.clientX + 10}px`;
                    ganttTooltip.style.top = `${e.clientY + 10}px`;
                    ganttTooltip.style.opacity = '1';
                });
                
                segmentEl.addEventListener('mouseleave', () => {
                    ganttTooltip.style.opacity = '0';
                });
                
                segmentEl.addEventListener('mousemove', (e) => {
                    ganttTooltip.style.left = `${e.clientX + 10}px`;
                    ganttTooltip.style.top = `${e.clientY + 10}px`;
                });
                
                ganttChart.appendChild(segmentEl);
            }
        });
    }
    
    function clearResults() {
        avgWaitTimeEl.textContent = '0';
        avgTurnaroundEl.textContent = '0';
        energyUsedEl.textContent = '0';
        energySavedEl.textContent = '0%';
        ganttChart.innerHTML = '';
        results = null;
        
        // Reset process statuses
        if (processes.length > 0) {
            processes.forEach(p => {
                p.status = 'Waiting';
            });
            renderProcessTable();
        }
    }
    
    function resetSimulation() {
        processes = [];
        processTableBody.innerHTML = '';
        clearResults();
    }
});
